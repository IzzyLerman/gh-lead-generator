name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dashboard

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type check
      run: npx tsc --noEmit

    - name: Run linter
      run: npm run lint

    - name: Build application
      run: npm run build

  backend-and-e2e-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.x

    - name: Install Deno libs
      run: deno install

    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Start Supabase local development setup
      run: supabase start

    - name: Run database migrations
      run: supabase db reset --local

    - name: Run database tests
      run: supabase test db

    - name: Run Deno function tests
      env:
        SUPABASE_URL: http://127.0.0.1:54321
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        ANTHROPIC_API_URL: ${{ secrets.ANTHROPIC_API_URL }}
        VISION_API_KEY: ${{ secrets.VISION_API_KEY }}
        VISION_API_URL: ${{ secrets.VISION_API_URL }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        GEOAPIFY_API_KEY: ${{ secrets.GEOAPIFY_API_KEY }}
        RECEIVE_EMAIL_URL: ${{ secrets.RECEIVE_EMAIL_URL }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        WORKER_URL: ${{ secrets.WORKER_URL }}
      run: deno test --allow-all ./supabase

    - name: Create supabase env file
      run: |
        echo "WORKER_URL=${{ secrets.WORKER_URL }}" >> ./supabase/.env.local
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> ./supabase/.env.local
        

    - name: Create functions env file
      run: |
        echo "SUPABASE_URL=http://127.0.0.1:54321" >> ./supabase/functions/.env.local
        echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> ./supabase/functions/.env.local
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> ./supabase/functions/.env.local
        echo "SUPABASE_DB_URL=${{ secrets.SUPABASE_DB_URL }}" >> ./supabase/functions/.env.local
        echo "SUPABASE_PROJECT_ID=${{ secrets.SUPABASE_PROJECT_ID }}" >> ./supabase/functions/.env.local
        echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> ./supabase/functions/.env.local
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> ./supabase/functions/.env.local
        echo "ANTHROPIC_API_URL=${{ secrets.ANTHROPIC_API_URL }}" >> ./supabase/functions/.env.local
        echo "VISION_API_KEY=${{ secrets.VISION_API_KEY }}" >> ./supabase/functions/.env.local
        echo "VISION_API_URL=${{ secrets.VISION_API_URL }}" >> ./supabase/functions/.env.local
        echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> ./supabase/functions/.env.local
        echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> ./supabase/functions/.env.local
        echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> ./supabase/functions/.env.local
        echo "GEOAPIFY_API_KEY=${{ secrets.GEOAPIFY_API_KEY }}" >> ./supabase/functions/.env.local
        echo "RECEIVE_EMAIL_URL=http://127.0.0.1:54321/functions/v1/receive-email" >> ./supabase/functions/.env.local
        echo "WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}" >> ./supabase/functions/.env.local
        echo "WORKER_URL=${{ secrets.WORKER_URL }}" >> ./supabase/functions/.env.local
        echo "USE_MOCK_VISION=true" >> ./supabase/functions/.env.local
        echo "USE_MOCK_LLM=true" >> ./supabase/functions/.env.local
        echo "E2E_REAL_APIS=true" >> ./supabase/functions/.env.local

    - name: Deploy functions locally
      run: supabase functions serve --no-verify-jwt --env-file=./supabase/functions/.env.local > ./tests/e2e/logs/functions_logs.txt & 

    - name: Wait for functions to be ready
      run: |
        echo "Waiting for functions to be ready..."
        timeout 30s bash -c '
          until curl -s $RECEIVE_EMAIL_URL > /dev/null; do
            echo "Still waiting..."
            sleep 2
          done
        '
      shell: bash
        

    - name: Install dashboard dependencies
      working-directory: ./dashboard
      run: npm ci

    - name: Build dashboard
      working-directory: ./dashboard
      run: npm run build

    - name: Start dashboard
      working-directory: ./dashboard
      run: npm run start &

    - name: Wait for dashboard to be ready
      run: sleep 3

    - name: Run E2E tests
      env:
        SUPABASE_URL: http://127.0.0.1:54321
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        ANTHROPIC_API_URL: ${{ secrets.ANTHROPIC_API_URL }}
        VISION_API_KEY: ${{ secrets.VISION_API_KEY }}
        VISION_API_URL: ${{ secrets.VISION_API_URL }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        GEOAPIFY_API_KEY: ${{ secrets.GEOAPIFY_API_KEY }}
        RECEIVE_EMAIL_URL: http://127.0.0.1:54321/functions/v1/receive-email
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        WORKER_URL: ${{ secrets.WORKER_URL }}
        DASHBOARD_URL: http://localhost:3000
        USE_MOCK_VISION: 'true'
        USE_MOCK_LLM: 'true'
        E2E_REAL_APIS: 'true'
      run: deno test --allow-all ./tests/e2e/

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: |
          tests/e2e/screenshots/
          tests/e2e/logs/
