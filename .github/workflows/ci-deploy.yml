---
name: CI and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dashboard

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

  backend-and-e2e-tests:
    runs-on: ubuntu-latest
    needs: frontend-tests

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install Deno libs
        run: deno install

      - name: Create supabase env file
        run: |
          echo "WORKER_URL=${{ secrets.WORKER_URL }}" >> ./supabase/.env.local
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> ./supabase/.env.local

      - name: Create functions env file
        run: |
          echo "SUPABASE_URL=http://127.0.0.1:54321" >> ./supabase/functions/.env.local
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> ./supabase/functions/.env.local
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> ./supabase/functions/.env.local
          echo "SUPABASE_DB_URL=${{ secrets.SUPABASE_DB_URL }}" >> ./supabase/functions/.env.local
          echo "SUPABASE_PROJECT_ID=${{ secrets.SUPABASE_PROJECT_ID }}" >> ./supabase/functions/.env.local
          echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> ./supabase/functions/.env.local
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> ./supabase/functions/.env.local
          echo "ANTHROPIC_API_URL=${{ secrets.ANTHROPIC_API_URL }}" >> ./supabase/functions/.env.local
          echo "VISION_API_KEY=${{ secrets.VISION_API_KEY }}" >> ./supabase/functions/.env.local
          echo "VISION_API_URL=${{ secrets.VISION_API_URL }}" >> ./supabase/functions/.env.local
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> ./supabase/functions/.env.local
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> ./supabase/functions/.env.local
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> ./supabase/functions/.env.local
          echo "GEOAPIFY_API_KEY=${{ secrets.GEOAPIFY_API_KEY }}" >> ./supabase/functions/.env.local
          echo "RECEIVE_EMAIL_URL=http://127.0.0.1:54321/functions/v1/receive-email" >> ./supabase/functions/.env.local
          echo "WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}" >> ./supabase/functions/.env.local
          echo "WORKER_URL=${{ secrets.WORKER_URL }}" >> ./supabase/functions/.env.local
          echo "ZOOMINFO_USERNAME=${{ secrets.ZOOMINFO_USERNAME }}" >> ./supabase/functions/.env.local
          echo "ZOOMINFO_CLIENT_ID=${{ secrets.ZOOMINFO_CLIENT_ID }}" >> ./supabase/functions/.env.local
          echo "ZOOMINFO_PRIVATE_KEY=${{ secrets.ZOOMINFO_PRIVATE_KEY }}" >> ./supabase/functions/.env.local
          echo "ENVIRONMENT='test'" >> ./supabase/functions/.env.local
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development setup
        run: supabase start

      - name: Run database migrations
        run: supabase db reset --local

      - name: Run database tests
        run: supabase test db

      - name: Run Deno function tests
        env:
          SUPABASE_URL: http://127.0.0.1:54321
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_API_URL: ${{ secrets.ANTHROPIC_API_URL }}
          VISION_API_KEY: ${{ secrets.VISION_API_KEY }}
          VISION_API_URL: ${{ secrets.VISION_API_URL }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          GEOAPIFY_API_KEY: ${{ secrets.GEOAPIFY_API_KEY }}
          RECEIVE_EMAIL_URL: ${{ secrets.RECEIVE_EMAIL_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          WORKER_URL: ${{ secrets.WORKER_URL }}
          ENVIRONMENT: 'test'
        run: deno test --allow-all ./supabase

      - name: Deploy functions locally
        run: |
          supabase functions serve --no-verify-jwt --env-file=./supabase/functions/.env.local > ./tests/e2e/logs/functions_logs.txt 2>&1 &

      - name: Wait for functions to be ready
        run: |
          echo "Waiting for functions to be ready..."
          timeout 30s bash -c "
            until curl -s http://127.0.0.1:54321/functions/v1/receive-email > /dev/null; do
              echo \"Still waiting...\"
              sleep 2
            done
          "
        shell: bash

      - name: Install dashboard dependencies
        working-directory: ./dashboard
        run: npm ci

      - name: Build dashboard
        working-directory: ./dashboard
        run: npm run build

      - name: Start dashboard
        working-directory: ./dashboard
        run: npm run start &

      - name: Wait for dashboard to be ready
        run: sleep 3

      - name: Run E2E tests
        env:
          SUPABASE_URL: http://127.0.0.1:54321
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_API_URL: ${{ secrets.ANTHROPIC_API_URL }}
          VISION_API_KEY: ${{ secrets.VISION_API_KEY }}
          VISION_API_URL: ${{ secrets.VISION_API_URL }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          GEOAPIFY_API_KEY: ${{ secrets.GEOAPIFY_API_KEY }}
          RECEIVE_EMAIL_URL: http://127.0.0.1:54321/functions/v1/receive-email
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          WORKER_URL: ${{ secrets.WORKER_URL }}
          DASHBOARD_URL: http://localhost:3000
          ENVIRONMENT: 'test'
          ZOOMINFO_USERNAME: ${{ secrets.ZOOMINFO_USERNAME }}
          ZOOMINFO_CLIENT_ID: ${{ secrets.ZOOMINFO_CLIENT_ID }}
          ZOOMINFO_PRIVATE_KEY: ${{ secrets.ZOOMINFO_PRIVATE_KEY }}
                

        run: deno test --allow-all --env-file=./supabase/functions/.env.local ./tests/e2e/

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            tests/e2e/screenshots/
            tests/e2e/logs/

  deploy-functions:
    runs-on: ubuntu-latest
    environment: production
    needs: backend-and-e2e-tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link Supabase CLI to remote project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_ID -p $SUPABASE_DB_PASSWORD

      - name: Apply database migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: supabase db push -p $SUPABASE_DB_PASSWORD

      - name: Deploy to Supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          supabase functions deploy receive-email
          supabase functions deploy worker
          supabase functions deploy find-contacts

      - name: Run post-deployment health checks
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          curl -f "$SUPABASE_URL/functions/v1/receive-email" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -X POST \
            -d '{}' || echo "Health check failed - function may need warmup"

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-functions
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_API_URL: ${{ secrets.ANTHROPIC_API_URL }}
          VISION_API_KEY: ${{ secrets.VISION_API_KEY }}
          VISION_API_URL: ${{ secrets.VISION_API_URL }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          GEOAPIFY_API_KEY: ${{ secrets.GEOAPIFY_API_KEY }}
          RECEIVE_EMAIL_URL: ${{ secrets.RECEIVE_EMAIL_URL }}
          WORKER_URL: ${{ secrets.WORKER_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi
