name: Deploy

on:
  workflow_dispatch:

jobs:

  deploy-functions:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Start Supabase CLI
      run: supabase start

    - name: Link Supabase CLI to remote project
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      run: supabase link --project-ref $SUPABASE_PROJECT_ID -p $SUPABASE_DB_PASSWORD

    - name: Apply database migrations
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      run: supabase db push 

    - name: Deploy to Supabase
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      run: |
        supabase functions deploy receive-email 
        supabase functions deploy worker 
        supabase functions deploy find-contacts 

    - name: Run post-deployment health checks
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        # Basic health check for receive-email function
        curl -f "$SUPABASE_URL/functions/v1/receive-email" \
          -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
          -X POST \
          -d '{}' || echo "Health check failed - function may need warmup"

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-functions

    steps:
    - uses: actions/checkout@v4

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        ANTHROPIC_API_URL: ${{ secrets.ANTHROPIC_API_URL }}
        VISION_API_KEY: ${{ secrets.VISION_API_KEY }}
        VISION_API_URL: ${{ secrets.VISION_API_URL }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        GEOAPIFY_API_KEY: ${{ secrets.GEOAPIFY_API_KEY }}
        RECEIVE_EMAIL_URL: ${{ secrets.RECEIVE_EMAIL_URL }}
        WORKER_URL: ${{ secrets.WORKER_URL }}
        WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}

    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful"
        else
          echo "❌ Deployment failed"
          exit 1
        fi
